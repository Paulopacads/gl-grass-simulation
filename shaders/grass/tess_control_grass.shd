#version 450

/*in gl_PerVertex 
{
    vec4 gl_Position; 
    float gl_PointSize; 
    float gl_ClipDistance[];
} gl_in[];

in int gl_PatchVerticesIn; 
in int gl_PrimitiveID;
in int gl_InvocationID;*/

in V_OUT
{
  vec3 bezier_base1;
  vec3 bezier_base2;
  vec3 bezier_middle;
  vec3 bezier_end;
} v_out[];

patch out CONTROL_OUT
{
  vec3 bezier_base1;
  vec3 bezier_base2;
  vec3 bezier_middle;
  vec3 bezier_end;
} control_out;

uniform vec3 camera_position; 
uniform float render_distance;

layout(vertices = 1) out; 

void main() {
    control_out.bezier_base1 = v_out[gl_InvocationID].bezier_base1;
    control_out.bezier_base2 = v_out[gl_InvocationID].bezier_base2;
    control_out.bezier_middle = v_out[gl_InvocationID].bezier_middle;
    control_out.bezier_end = v_out[gl_InvocationID].bezier_end;

    vec3 camera_to_point = gl_in[gl_InvocationID].gl_Position.xyz - camera_position;
    float camera_distance = length(camera_to_point);
    int tessLevel = 1;
    if (camera_distance < render_distance) {
        float clipDistance = camera_distance / render_distance;
        tessLevel = int(clamp(15.0 * (1 - clipDistance), 1.0, 10.0));
    }
    gl_TessLevelOuter[0] = tessLevel;
    gl_TessLevelOuter[1] = 1;
    gl_TessLevelOuter[2] = tessLevel;
    gl_TessLevelOuter[3] = 1;

    gl_TessLevelInner[0] = 1; 
    gl_TessLevelInner[1] = tessLevel; 

    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}